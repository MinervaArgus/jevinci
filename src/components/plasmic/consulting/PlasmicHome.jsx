// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9Wy1b3THTSs75bMR8UrtAP
// Component: bRDXOCV7sy
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: EGMfw0aj_iVHgo/component
import { useScreenVariants as useScreenVariantspiab3EKRmJqZ0U } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: piab3eKRmJqZ0u/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_consulting.module.css"; // plasmic-import: 9Wy1b3THTSs75bMR8UrtAP/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: bRDXOCV7sy/css
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: t0V5mkgXcd8F5L/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: eIg_NaAwaLt/icon
import smartSelect20221118124516PicSoRemovebgPreviewpngTx038IbJd from "./images/smartSelect20221118124516PicSoRemovebgPreviewpng.png"; // plasmic-import: TX038ibJd/picture

export const PlasmicHome__VariantProps = new Array();

export const PlasmicHome__ArgProps = new Array();

function PlasmicHome__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const currentUser = p.useCurrentUser?.() || {};
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantspiab3EKRmJqZ0U()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__vsYa6)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__lePqx)}
            >
              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"83px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: smartSelect20221118124516PicSoRemovebgPreviewpngTx038IbJd,
                  fullWidth: 486,
                  fullHeight: 513,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qgykD
                )}
              >
                {"JEVINCI CONSULTING"}
              </div>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__iyM64)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gJhys)}
                  >
                    {false ? (
                      <button
                        className={classNames(
                          projectcss.all,
                          projectcss.button,
                          projectcss.__wab_text,
                          sty.button___8MK
                        )}
                      >
                        {"Sign up"}
                      </button>
                    ) : null}
                  </div>
                ) : null}
              </p.Stack>

              <Button
                className={classNames("__wab_instance", sty.button__buL0)}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__tAeBi)}
                    role={"img"}
                  />
                }
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__kBrHx)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yzlqJ
                  )}
                >
                  {"ABOUT US"}
                </div>
              </Button>

              <Button
                className={classNames("__wab_instance", sty.button__rzpYb)}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__h7MTa)}
                    role={"img"}
                  />
                }
                link={`/services-2`}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__sZoYc)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__f6U8A
                  )}
                >
                  {"SERVICES"}
                </div>
              </Button>

              <Button
                className={classNames("__wab_instance", sty.button___2RzMm)}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__yxD0X)}
                    role={"img"}
                  />
                }
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__byWv2)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__r0Ioz
                  )}
                >
                  {"CONTACT US"}
                </div>
              </Button>
            </p.Stack>

            <div className={classNames(projectcss.all, sty.freeBox___81Ejd)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lLvsF)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__dGzX2)}
                />

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__lzPoo)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__i1V5S
                    )}
                  >
                    {"We Make Systems and Develop Bitchin' Websites"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aApJj
                    )}
                  >
                    {
                      "Here at Jevinci Consulting, we take problems seriously. Therefore, we handle them seriously."
                    }
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___4DbHm)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__efn3L
                      )}
                      endIcon={
                        <Icon38Icon
                          className={classNames(projectcss.all, sty.svg__s52Lk)}
                          role={"img"}
                        />
                      }
                      shape={"rounded"}
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__v7S8D)}
                          role={"img"}
                        />
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iiLjY
                        )}
                      >
                        {"Start now ->"}
                      </div>
                    </Button>

                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__pLsXu
                      )}
                      color={"clear"}
                      endIcon={
                        <Icon38Icon
                          className={classNames(projectcss.all, sty.svg__bdAkz)}
                          role={"img"}
                        />
                      }
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__qsPtm)}
                          role={"img"}
                        />
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__i6FN4
                        )}
                      >
                        {"Learn more…"}
                      </div>
                    </Button>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
