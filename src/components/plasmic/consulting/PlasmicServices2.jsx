// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9Wy1b3THTSs75bMR8UrtAP
// Component: mgL1JjLu-u
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: EGMfw0aj_iVHgo/component
import { useScreenVariants as useScreenVariantspiab3EKRmJqZ0U } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: piab3eKRmJqZ0u/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_consulting.module.css"; // plasmic-import: 9Wy1b3THTSs75bMR8UrtAP/projectcss
import sty from "./PlasmicServices2.module.css"; // plasmic-import: mgL1JjLu-u/css
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: t0V5mkgXcd8F5L/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: eIg_NaAwaLt/icon
import jevinciConsultantspng3B1Whihq3 from "./images/jevinciConsultantspng.png"; // plasmic-import: 3B1WHIHQ3/picture

export const PlasmicServices2__VariantProps = new Array();

export const PlasmicServices2__ArgProps = new Array();

function PlasmicServices2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const currentUser = p.useCurrentUser?.() || {};
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantspiab3EKRmJqZ0U()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__b8G0I)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___6J8Qe)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___2HyH0)}
              >
                <p.PlasmicImg
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"160px"}
                  onClick={""}
                  src={{
                    src: jevinciConsultantspng3B1Whihq3,
                    fullWidth: 500,
                    fullHeight: 500,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6Q6I8
                  )}
                >
                  {"JEVINCI CONSULTING"}
                </div>

                <Button
                  className={classNames("__wab_instance", sty.button__h0U4T)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__wviOk)}
                      role={"img"}
                    />
                  }
                  link={`/home`}
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__u48Zp)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___529KH
                    )}
                  >
                    {"HOME"}
                  </div>
                </Button>

                <Button
                  className={classNames("__wab_instance", sty.button__pV84L)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__urzyn)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__eKu5A)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__whKrH
                    )}
                  >
                    {"ABOUT US"}
                  </div>
                </Button>

                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___8DPJg)}
                  >
                    {false ? (
                      <button
                        className={classNames(
                          projectcss.all,
                          projectcss.button,
                          projectcss.__wab_text,
                          sty.button__j93Ql
                        )}
                      >
                        {"Sign up"}
                      </button>
                    ) : null}
                  </div>
                ) : null}
              </p.Stack>

              <Button
                className={classNames("__wab_instance", sty.button___7CFye)}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg___6JTUr)}
                    role={"img"}
                  />
                }
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__hTwun)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__exOet
                  )}
                >
                  {"CONTACT US"}
                </div>
              </Button>
            </p.Stack>

            <div className={classNames(projectcss.all, sty.freeBox__hwUpy)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ipsIj)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__aR4Wi)}
                />

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___7XA0I)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__of1Ux
                    )}
                  >
                    {"We Make Systems and Develop Bitchin' Websites"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xEpNd
                    )}
                  >
                    {
                      "Here at Jevinci Consulting, we take problems seriously. Therefore, we handle them seriously."
                    }
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__t89Jf)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__tHyln
                      )}
                      endIcon={
                        <Icon38Icon
                          className={classNames(projectcss.all, sty.svg___3ADj)}
                          role={"img"}
                        />
                      }
                      shape={"rounded"}
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__kmGb)}
                          role={"img"}
                        />
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__trKkR
                        )}
                      >
                        {"Start now ->"}
                      </div>
                    </Button>

                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__zb5Zp
                      )}
                      color={"clear"}
                      endIcon={
                        <Icon38Icon
                          className={classNames(projectcss.all, sty.svg__grjyT)}
                          role={"img"}
                        />
                      }
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__gzrv1)}
                          role={"img"}
                        />
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1San
                        )}
                      >
                        {"Learn more…"}
                      </div>
                    </Button>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicServices2__ArgProps,
          internalVariantPropNames: PlasmicServices2__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicServices2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicServices2";
  } else {
    func.displayName = `PlasmicServices2.${nodeName}`;
  }
  return func;
}

export const PlasmicServices2 = Object.assign(
  // Top-level PlasmicServices2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicServices2
    internalVariantProps: PlasmicServices2__VariantProps,
    internalArgProps: PlasmicServices2__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicServices2;
/* prettier-ignore-end */
