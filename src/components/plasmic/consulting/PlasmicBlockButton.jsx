// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9Wy1b3THTSs75bMR8UrtAP
// Component: n7RZHq9YTMzqib
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_consulting.module.css"; // plasmic-import: 9Wy1b3THTSs75bMR8UrtAP/projectcss
import sty from "./PlasmicBlockButton.module.css"; // plasmic-import: n7RZHq9YTMzqib/css
import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: hFvtBDKj5rLEvo/icon

export const PlasmicBlockButton__VariantProps = new Array("variants");

export const PlasmicBlockButton__ArgProps = new Array();

function PlasmicBlockButton__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const currentUser = p.useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "variants",
        type: "private",
        initFunc: ($props, $state) => $props["variants"]
      }
    ],

    [$props]
  );

  const $state = p.useDollarState(stateSpecs, $props);
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root,
        {
          [sty.rootvariants_following]: hasVariant(
            $state,
            "variants",
            "following"
          )
        }
      )}
    >
      <Icon20Icon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg, {
          [sty.svgvariants_following]: hasVariant(
            $state,
            "variants",
            "following"
          )
        })}
        role={"img"}
      />

      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textvariants_following]: hasVariant(
            $state,
            "variants",
            "following"
          )
        })}
      >
        {"Block"}
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "svg", "text"],
  svg: ["svg"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBlockButton__ArgProps,
          internalVariantPropNames: PlasmicBlockButton__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicBlockButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBlockButton";
  } else {
    func.displayName = `PlasmicBlockButton.${nodeName}`;
  }
  return func;
}

export const PlasmicBlockButton = Object.assign(
  // Top-level PlasmicBlockButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicBlockButton
    internalVariantProps: PlasmicBlockButton__VariantProps,
    internalArgProps: PlasmicBlockButton__ArgProps
  }
);

export default PlasmicBlockButton;
/* prettier-ignore-end */
