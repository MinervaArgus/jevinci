// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9Wy1b3THTSs75bMR8UrtAP
// Component: sh8Y76trVqg9KR
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Bullet from "../../Bullet"; // plasmic-import: gLJtZ8s2GxeshY/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_consulting.module.css"; // plasmic-import: 9Wy1b3THTSs75bMR8UrtAP/projectcss
import sty from "./PlasmicBulletItem.module.css"; // plasmic-import: sh8Y76trVqg9KR/css

export const PlasmicBulletItem__VariantProps = new Array();

export const PlasmicBulletItem__ArgProps = new Array("children", "slot");

function PlasmicBulletItem__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const currentUser = p.useCurrentUser?.() || {};
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <Bullet
        data-plasmic-name={"bullet"}
        data-plasmic-override={overrides.bullet}
        className={classNames("__wab_instance", sty.bullet)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "â€¢",
          value: args.slot
        })}
      </Bullet>

      <div className={classNames(projectcss.all, sty.freeBox__g5DW)}>
        <div className={classNames(projectcss.all, sty.freeBox__iK4Af)}>
          {p.renderPlasmicSlot({
            defaultContents:
              "You can always press Cmd+Z to undo if you mess up.",
            value: args.children,
            className: classNames(sty.slotTargetChildren)
          })}
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "bullet"],
  bullet: ["bullet"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBulletItem__ArgProps,
          internalVariantPropNames: PlasmicBulletItem__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicBulletItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBulletItem";
  } else {
    func.displayName = `PlasmicBulletItem.${nodeName}`;
  }
  return func;
}

export const PlasmicBulletItem = Object.assign(
  // Top-level PlasmicBulletItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    bullet: makeNodeComponent("bullet"),
    // Metadata about props expected for PlasmicBulletItem
    internalVariantProps: PlasmicBulletItem__VariantProps,
    internalArgProps: PlasmicBulletItem__ArgProps
  }
);

export default PlasmicBulletItem;
/* prettier-ignore-end */
