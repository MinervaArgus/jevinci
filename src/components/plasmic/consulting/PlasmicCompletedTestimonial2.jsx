// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9Wy1b3THTSs75bMR8UrtAP
// Component: 05u-OcMoDHcHv
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_consulting.module.css"; // plasmic-import: 9Wy1b3THTSs75bMR8UrtAP/projectcss
import sty from "./PlasmicCompletedTestimonial2.module.css"; // plasmic-import: 05u-OcMoDHcHv/css
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: mbUYaplPwcB82t/icon
import image45DBg35WXAvtDhbl from "./images/image45.png"; // plasmic-import: dBg35wXAvtDHBL/picture

export const PlasmicCompletedTestimonial2__VariantProps = new Array();

export const PlasmicCompletedTestimonial2__ArgProps = new Array(
  "quote",
  "bio",
  "profilePicture"
);

function PlasmicCompletedTestimonial2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const currentUser = p.useCurrentUser?.() || {};
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__psVWr)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__y6Ni6)}
              displayHeight={"100px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100px"}
              src={{
                src: image45DBg35WXAvtDhbl,
                fullWidth: 205,
                fullHeight: 208,
                aspectRatio: undefined
              }}
            />
          ),

          value: args.profilePicture
        })}
      </div>

      <Icon28Icon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg)}
        role={"img"}
      />

      <div className={classNames(projectcss.all, sty.freeBox__g8Nfi)}>
        <div className={classNames(projectcss.all, sty.freeBox__aIxyg)}>
          {p.renderPlasmicSlot({
            defaultContents: "Truly revolutionary. An incredible leap forward.",
            value: args.quote,
            className: classNames(sty.slotTargetQuote)
          })}
        </div>
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___6J1Ur)}
      >
        <div className={classNames(projectcss.all, sty.freeBox___5YHy8)}>
          {p.renderPlasmicSlot({
            defaultContents: "VP Marketing\nPied Piper",
            value: args.bio,
            className: classNames(sty.slotTargetBio)
          })}
        </div>
      </p.Stack>

      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"Read case study -->"}
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "svg", "text"],
  svg: ["svg"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCompletedTestimonial2__ArgProps,
          internalVariantPropNames: PlasmicCompletedTestimonial2__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicCompletedTestimonial2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCompletedTestimonial2";
  } else {
    func.displayName = `PlasmicCompletedTestimonial2.${nodeName}`;
  }
  return func;
}

export const PlasmicCompletedTestimonial2 = Object.assign(
  // Top-level PlasmicCompletedTestimonial2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicCompletedTestimonial2
    internalVariantProps: PlasmicCompletedTestimonial2__VariantProps,
    internalArgProps: PlasmicCompletedTestimonial2__ArgProps
  }
);

export default PlasmicCompletedTestimonial2;
/* prettier-ignore-end */
